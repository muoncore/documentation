'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.do_alts = exports.DEFAULT = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _channels = require('./channels');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AltHandler = function () {
  function AltHandler(flag, f) {
    (0, _classCallCheck3.default)(this, AltHandler);

    this.f = f;
    this.flag = flag;
  }

  (0, _createClass3.default)(AltHandler, [{
    key: 'is_active',
    value: function is_active() {
      return this.flag.value;
    }
  }, {
    key: 'is_blockable',
    value: function is_blockable() {
      return true;
    }
  }, {
    key: 'commit',
    value: function commit() {
      this.flag.value = false;
      return this.f;
    }
  }]);
  return AltHandler;
}();

var AltResult = function AltResult(value, channel) {
  (0, _classCallCheck3.default)(this, AltResult);

  this.value = value;
  this.channel = channel;
};

function rand_int(n) {
  return Math.floor(Math.random() * (n + 1));
}

function random_array(n) {
  var a = new Array(n);
  var i = void 0;

  for (i = 0; i < n; i++) {
    a[i] = 0;
  }
  for (i = 1; i < n; i++) {
    var j = rand_int(i);
    a[i] = a[j];
    a[j] = i;
  }
  return a;
}

var DEFAULT = exports.DEFAULT = {
  toString: function toString() {
    return '[object DEFAULT]';
  }
};

// TODO: Accept a priority function or something
var do_alts = exports.do_alts = function do_alts(operations, callback, options) {
  var length = operations.length;
  // XXX Hmm
  if (length === 0) {
    throw new Error("Empty alt list");
  }

  var priority = options && options.priority ? true : false;
  if (!priority) {
    var indexes = random_array(length);
  }

  var flag = new _channels.Box(true);
  var result;

  for (var i = 0; i < length; i++) {
    var operation = operations[priority ? i : indexes[i]];
    var port;
    // XXX Hmm
    if (operation instanceof Array) {
      var value = operation[1];
      port = operation[0];
      // We wrap this in a function to capture the value of "port",
      // because js' closure captures vars by "references", not
      // values. "let port" would have worked, but I don't want to
      // raise the runtime requirement yet. TODO: So change this when
      // most runtimes are modern enough.
      result = port._put(value, function (port) {
        return new AltHandler(flag, function (ok) {
          callback(new AltResult(ok, port));
        });
      }(port));
    } else {
      port = operation;
      result = port._take(function (port) {
        return new AltHandler(flag, function (value) {
          callback(new AltResult(value, port));
        });
      }(port));
    }
    // XXX Hmm
    if (result instanceof _channels.Box) {
      callback(new AltResult(result.value, port));
      break;
    }
  }

  if (!(result instanceof _channels.Box) && (0, _get2.default)(options, 'default')) {
    if (flag.value) {
      flag.value = false;
      callback(new AltResult(options.default, DEFAULT));
    }
  }
};